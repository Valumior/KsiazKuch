/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jksiazkuch;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.swing.JLabel;
import javax.swing.JSlider;
import javax.swing.JSpinner;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author valumior
 */
public class ShowSkladniki extends javax.swing.JDialog {

    private ArrayList<Skladnik> skladniks;
    
    /**
     * Creates new form ShowSkladniki
     */
    public ShowSkladniki(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        LoadList();
        
        jList1.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                ListItemSelectionChanged(e);
            }
            
        });
        
        this.skladnikWartosciSpinBox.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                JSpinner spinner = (JSpinner) e.getSource();
                Integer newValue = Integer.parseInt(spinner.getValue().toString());

                skladnikWartoscihorizontalSlider.setValue(newValue);
                adjustWartosciOdzywczeValues(newValue);
            }
        });
        
        this.skladnikWartoscihorizontalSlider.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                JSlider slider = (JSlider) e.getSource();
                Integer newValue = slider.getValue();
                
                skladnikWartosciSpinBox.setValue(newValue);
                adjustWartosciOdzywczeValues(newValue);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSlider1 = new javax.swing.JSlider();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        skladnikWartosciOdzywczeLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        skladnikiKalorieLabel = new javax.swing.JLabel();
        skladnikiTluszczeCalkowiteLabel = new javax.swing.JLabel();
        skladnikiTluszczeNasyconeLabel = new javax.swing.JLabel();
        skladnikiTluszczeNienasyconeLabel = new javax.swing.JLabel();
        skladnikiCholesterolLabel = new javax.swing.JLabel();
        skladnikiSodLabel = new javax.swing.JLabel();
        skladnikiWeglowodanyLabel = new javax.swing.JLabel();
        skladnikiBlonnikLabel = new javax.swing.JLabel();
        skladnikiCukryLabel = new javax.swing.JLabel();
        skladnikiBialkaLabel = new javax.swing.JLabel();
        skladnikWartosciSpinBox = new javax.swing.JSpinner();
        skladnikWartoscihorizontalSlider = new javax.swing.JSlider();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);

        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jList1);

        skladnikWartosciOdzywczeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        skladnikWartosciOdzywczeLabel.setText("Wartosci odzywcze dla...");

        jLabel1.setText("Kalorie:");

        jLabel2.setText("Tluszcze calkowite:");

        jLabel3.setText("w tym Tluszcze Nasycone:");

        jLabel4.setText("w tym Tluszcze Nienasycone:");

        jLabel5.setText("Cholesterol:");

        jLabel6.setText("Sod:");

        jLabel7.setText("Weglowodany:");

        jLabel8.setText("w tym blonnik:");

        jLabel9.setText("w tym cukry:");

        jLabel10.setText("Bialka:");

        skladnikWartosciSpinBox.setModel(new javax.swing.SpinnerNumberModel(1, 1, 10000, 1));

        skladnikWartoscihorizontalSlider.setMaximum(10000);
        skladnikWartoscihorizontalSlider.setMinimum(1);
        skladnikWartoscihorizontalSlider.setValue(1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(skladnikWartoscihorizontalSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(skladnikWartosciSpinBox, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(skladnikWartosciOdzywczeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(skladnikiCholesterolLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(skladnikiKalorieLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(skladnikiTluszczeCalkowiteLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(skladnikiBialkaLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(skladnikiSodLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(skladnikiWeglowodanyLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(skladnikiBlonnikLabel))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(skladnikiCukryLabel))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                                        .addComponent(skladnikiTluszczeNienasyconeLabel))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(skladnikiTluszczeNasyconeLabel)))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(skladnikWartosciOdzywczeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(skladnikiKalorieLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(skladnikiTluszczeCalkowiteLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(skladnikiTluszczeNasyconeLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(skladnikiTluszczeNienasyconeLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(skladnikiCholesterolLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(skladnikiSodLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(skladnikiWeglowodanyLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(skladnikiBlonnikLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(skladnikiCukryLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(skladnikiBialkaLabel)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(skladnikWartosciSpinBox, javax.swing.GroupLayout.DEFAULT_SIZE, 18, Short.MAX_VALUE)
                    .addComponent(skladnikWartoscihorizontalSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LoadList(){
        Connection con = null;
        try{
            Class.forName("org.sqlite.JDBC");
            try{
                con = DriverManager.getConnection("jdbc:sqlite:../DB/cookbook.db");
                Statement state = con.createStatement();
            
                skladniks = Skladnik.getObjects(state);
                jList1.setListData(skladniks.toArray());
            }
            catch(SQLException e){
                System.out.println(e.getMessage());
            }
            
        }
        catch(Exception e){
            e.printStackTrace();
        }
        finally{
            try{
                con.close();
            }
            catch(SQLException e){
                System.out.println(e.getMessage());
            }
        }
    }
    
    private void adjustWartosciOdzywczeValues(int newValue) {
        Skladnik skladnik = (Skladnik)this.jList1.getSelectedValue();

        double ratio = 1;
        if(skladnik.getMiara() == Skladnik.Miara.Mililitry || skladnik.getMiara() == Skladnik.Miara.Gramy) {
            ratio = 100;
        }

        ratio = newValue / ratio;

        this.skladnikiKalorieLabel.setText(Double.toString(skladnik.getWartosciOdzywcze().getKalorie() * ratio));
        this.skladnikiTluszczeCalkowiteLabel.setText(Double.toString(skladnik.getWartosciOdzywcze().getTluszczeCalkowite() * ratio));
        this.skladnikiTluszczeNasyconeLabel.setText(Double.toString(skladnik.getWartosciOdzywcze().getTluszczeNasycone() * ratio));
        this.skladnikiTluszczeNienasyconeLabel.setText(Double.toString(skladnik.getWartosciOdzywcze().getTluszczeNienasycone() * ratio));
        this.skladnikiCholesterolLabel.setText(Double.toString(skladnik.getWartosciOdzywcze().getCholesterol() * ratio));
        this.skladnikiSodLabel.setText(Double.toString(skladnik.getWartosciOdzywcze().getSod() * ratio));
        this.skladnikiWeglowodanyLabel.setText(Double.toString(skladnik.getWartosciOdzywcze().getWeglowodany() * ratio));
        this.skladnikiCukryLabel.setText(Double.toString(skladnik.getWartosciOdzywcze().getCukry() * ratio));
        this.skladnikiBlonnikLabel.setText(Double.toString(skladnik.getWartosciOdzywcze().getBlonnik() * ratio));
        this.skladnikiBialkaLabel.setText(Double.toString(skladnik.getWartosciOdzywcze().getBialka() * ratio));

        this.rephraseKaloriesMiarasOn(this.skladnikiKalorieLabel);
        this.rephraseGramysMiaraOn(this.skladnikiTluszczeCalkowiteLabel);
        this.rephraseGramysMiaraOn(this.skladnikiTluszczeNasyconeLabel);
        this.rephraseGramysMiaraOn(this.skladnikiTluszczeNienasyconeLabel);
        this.rephraseGramysMiaraOn(this.skladnikiCholesterolLabel);
        this.rephraseGramysMiaraOn(this.skladnikiSodLabel);
        this.rephraseGramysMiaraOn(this.skladnikiWeglowodanyLabel);
        this.rephraseGramysMiaraOn(this.skladnikiCukryLabel);
        this.rephraseGramysMiaraOn(this.skladnikiBlonnikLabel);
        this.rephraseGramysMiaraOn(this.skladnikiBialkaLabel);

        this.changeTitleOnTopLabel();
   }
    
    private void ListItemSelectionChanged(ListSelectionEvent e){
        Skladnik skladnik = (Skladnik)this.jList1.getSelectedValue();

    if(skladnik.getMiara() == Skladnik.Miara.Mililitry || skladnik.getMiara() == Skladnik.Miara.Gramy) {
        this.skladnikWartoscihorizontalSlider.setMinimum(1);
        this.skladnikWartoscihorizontalSlider.setMaximum(10000);
        this.skladnikWartoscihorizontalSlider.setValue(100);

        ((SpinnerNumberModel)this.skladnikWartosciSpinBox.getModel()).setMinimum(1);
        ((SpinnerNumberModel)this.skladnikWartosciSpinBox.getModel()).setMaximum(10000);
        this.skladnikWartosciSpinBox.setValue(100);
    }
    else {
        this.skladnikWartoscihorizontalSlider.setMinimum(1);
        this.skladnikWartoscihorizontalSlider.setMaximum(100);
        this.skladnikWartoscihorizontalSlider.setValue(1);

        ((SpinnerNumberModel)this.skladnikWartosciSpinBox.getModel()).setMinimum(1);
        ((SpinnerNumberModel)this.skladnikWartosciSpinBox.getModel()).setMaximum(100);
        this.skladnikWartosciSpinBox.setValue(1);
    }

        this.skladnikiKalorieLabel.setText(Integer.toString(skladnik.getWartosciOdzywcze().getKalorie()));
        this.skladnikiTluszczeCalkowiteLabel.setText(Integer.toString(skladnik.getWartosciOdzywcze().getTluszczeCalkowite()));
        this.skladnikiTluszczeNasyconeLabel.setText(Integer.toString(skladnik.getWartosciOdzywcze().getTluszczeNasycone()));
        this.skladnikiTluszczeNienasyconeLabel.setText(Integer.toString(skladnik.getWartosciOdzywcze().getTluszczeNienasycone()));
        this.skladnikiCholesterolLabel.setText(Integer.toString(skladnik.getWartosciOdzywcze().getCholesterol()));
        this.skladnikiSodLabel.setText(Integer.toString(skladnik.getWartosciOdzywcze().getSod()));
        this.skladnikiWeglowodanyLabel.setText(Integer.toString(skladnik.getWartosciOdzywcze().getWeglowodany()));
        this.skladnikiCukryLabel.setText(Integer.toString(skladnik.getWartosciOdzywcze().getCukry()));
        this.skladnikiBlonnikLabel.setText(Integer.toString(skladnik.getWartosciOdzywcze().getBlonnik()));
        this.skladnikiBialkaLabel.setText(Integer.toString(skladnik.getWartosciOdzywcze().getBialka()));

        this.rephraseKaloriesMiarasOn(this.skladnikiKalorieLabel);
        this.rephraseGramysMiaraOn(this.skladnikiTluszczeCalkowiteLabel);
        this.rephraseGramysMiaraOn(this.skladnikiTluszczeNasyconeLabel);
        this.rephraseGramysMiaraOn(this.skladnikiTluszczeNienasyconeLabel);
        this.rephraseGramysMiaraOn(this.skladnikiCholesterolLabel);
        this.rephraseGramysMiaraOn(this.skladnikiSodLabel);
        this.rephraseGramysMiaraOn(this.skladnikiWeglowodanyLabel);
        this.rephraseGramysMiaraOn(this.skladnikiCukryLabel);
        this.rephraseGramysMiaraOn(this.skladnikiBlonnikLabel);
        this.rephraseGramysMiaraOn(this.skladnikiBialkaLabel);

        this.changeTitleOnTopLabel();
    }
    
    private void rephraseKaloriesMiarasOn(JLabel label) {
        double kalories = Double.parseDouble(label.getText());
        double kilokalories = kalories / 1000;
    
        if(kilokalories < 1.0f) {
            label.setText(new DecimalFormat("#.##").format(kalories) + " cal");
            return;
        }
        label.setText(new DecimalFormat("#.##").format(kilokalories) + " kcal");
    }

    private void rephraseGramysMiaraOn(JLabel label) {
        double miligramys = Double.parseDouble(label.getText());
        double gramys = miligramys / 1000;
        
        if(gramys < 1.0f) {
            label.setText(new DecimalFormat("#.##").format(miligramys) + " mg");
            return;
        }

        double kilogramys = gramys / 1000;
        if(kilogramys < 1.0f) {
            label.setText(new DecimalFormat("#.##").format(gramys) + " g");
            return;
        }
        label.setText(new DecimalFormat("#.##").format(kilogramys) + " kg");
    }

    private void changeTitleOnTopLabel() {
        Skladnik skladnik = (Skladnik)this.jList1.getSelectedValue();
        Integer miaraValue = (Integer) this.skladnikWartosciSpinBox.getValue();

        switch(skladnik.getMiara()) {
            case Mililitry:
                this.skladnikWartosciOdzywczeLabel.setText("Wartości odżywcze dla " 
                        + miaraValue + " ml");
                break;
            case Gramy:
               this.skladnikWartosciOdzywczeLabel.setText("Wartości odżywcze dla " 
                        + miaraValue + " g");
                break;
            case Sztuki:
                this.skladnikWartosciOdzywczeLabel.setText("Wartości odżywcze dla " 
                        + miaraValue + " sztuk");
                break;
            default:
                break;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ShowSkladniki.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ShowSkladniki.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ShowSkladniki.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShowSkladniki.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ShowSkladniki dialog = new ShowSkladniki(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JLabel skladnikWartosciOdzywczeLabel;
    private javax.swing.JSpinner skladnikWartosciSpinBox;
    private javax.swing.JSlider skladnikWartoscihorizontalSlider;
    private javax.swing.JLabel skladnikiBialkaLabel;
    private javax.swing.JLabel skladnikiBlonnikLabel;
    private javax.swing.JLabel skladnikiCholesterolLabel;
    private javax.swing.JLabel skladnikiCukryLabel;
    private javax.swing.JLabel skladnikiKalorieLabel;
    private javax.swing.JLabel skladnikiSodLabel;
    private javax.swing.JLabel skladnikiTluszczeCalkowiteLabel;
    private javax.swing.JLabel skladnikiTluszczeNasyconeLabel;
    private javax.swing.JLabel skladnikiTluszczeNienasyconeLabel;
    private javax.swing.JLabel skladnikiWeglowodanyLabel;
    // End of variables declaration//GEN-END:variables
}
